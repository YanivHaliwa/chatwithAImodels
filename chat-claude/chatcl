#!/usr/bin/env python3

import os
import textwrap
import openai
from openai import OpenAI
import colorama
from colorama import Fore, Style
from urllib.parse import urlparse
import re
import requests
import time
import threading
import sys
import time
from datetime import datetime, timedelta
from requests.exceptions import HTTPError, ConnectionError, Timeout, RequestException
from bs4 import BeautifulSoup
from datetime import datetime
import anthropic
import os

# Initialize Anthropic client with API key from environment variable
# Remove any problematic parameters like 'proxies' that might cause errors
# Get API key from environment or use a default key (make sure to set your API key)
api_key = os.environ.get("ANTHROPIC_API_KEY")
if not api_key:
    print(f"{Fore.RED}Warning: ANTHROPIC_API_KEY environment variable not set.{Style.RESET_ALL}")
    print(f"{Fore.YELLOW}Please set it using: export ANTHROPIC_API_KEY=your_api_key{Style.RESET_ALL}")
    # You can uncomment and set a default key below if needed
    # api_key = "your-api-key-here"

# Initialize Anthropic client 
client = anthropic.Anthropic(api_key=api_key)
# Use one of the currently available Claude models - model alias ensures we always use latest version
model = "claude-opus-4-0"  # This alias will always point to the latest Opus 4 model
conpath="conversation.txt"

# Colors for user and Claude responses
USER_COLOR = "\033[94m"  # Light blue
CLAUDE_COLOR = "\033[92m"  # Light green
RESET_COLOR = "\033[0m"  # Reset color   

#version 16.4

colorama.init(autoreset=True)
alert_message = f"{Fore.YELLOW}Type {Fore.LIGHTCYAN_EX}/help{Fore.YELLOW} at any time for information on how to use the commands.{Style.RESET_ALL}\n"
print(alert_message)

help_text = (
    f"{Fore.YELLOW}Welcome to the Interactive Chat and URL Text Extraction Script!{Style.RESET_ALL}\n"
    f"This script leverages OpenAI's GPT for conversation and extracts text from specified URLs to facilitate dynamic interactions.\n\n"
    
    f"{Fore.CYAN}Special Commands:{Style.RESET_ALL}\n"
    f"  {Fore.GREEN}/help{Style.RESET_ALL} - Show this help message.\n"
    f"  {Fore.GREEN}exit{Style.RESET_ALL}  - Exit the script.\n"
    f"  {Fore.GREEN}url{Style.RESET_ALL}   - if you mention 'url' and then link then ask question about it,\n"
    f"          gpt will read the text from the url and give response accordingly.\n"
    f"          exmaple:\n"
    f"          url https://example.com  exaplain me this article/summarize this article.\n\n"
    f"          important: this option may not work on all websites! "
)

conversation_log =[]
uhistory = []
bhistory = []
filename=""
CHUNK_SIZE = 1024  

timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')

def process_conversation_log(conversation_log):
    
    conversation_log= ' '.join(conversation_log)
    uhistory = []
    bhistory = []
    current_message = ""
    current_author = None  

    for line in conversation_log.strip().split("\n"):
        if line[:19].count(":") == 2:  
            if current_author == "USER":
                uhistory.append(current_message.strip())
            elif current_author == "BOT":
                bhistory.append(current_message.strip())

            colon_space_index = line.find(": ") -4
            current_message = line[colon_space_index:]
            current_author = "USER" if "USER:" in line else "BOT"
        else:
            current_message += " " + line

    if current_author == "USER":
        uhistory.append(current_message.strip())
    elif current_author == "BOT":
        bhistory.append(current_message.strip())

    return uhistory, bhistory
 
def extract_text_from_url(url, output_dir):
    try:
        response = requests.get(url, timeout=10)  # Added timeout for the request
        response.raise_for_status()  # This will raise an HTTPError for bad responses

        response = requests.get(url)

        response.raise_for_status()

        soup = BeautifulSoup(response.text, 'html.parser')

        for script in soup(["script", "style"]):
            script.decompose()

        text = soup.get_text()

        lines = (line.strip() for line in text.splitlines())
        chunks = (phrase.strip() for line in lines for phrase in line.split("  "))
        text = '\n'.join(chunk for chunk in chunks if chunk)

        title = soup.title.string if soup.title else "default_title"  # use "default_title" if title is None
        title = re.sub(r'[\W_]+', '_', title)
        timestamp = datetime.now().strftime('%Y%m%d%H%M%S')
        filename = f"{title}_{timestamp}.txt"

        with open(os.path.join(output_dir, filename), 'w') as f:
            f.write(text)
        return filename

    except HTTPError as http_err:
        print(f"HTTP error occurred: {http_err}") 
    except ConnectionError:
        print("Error connecting to the server. Please check your internet connection or the website may be down.")
    except Timeout:
        print("The request timed out. Please try again later.")
    except RequestException as err:
        print(f"An unexpected error occurred: {err}")
    except Exception as e:
        print(f"An error occurred: {e}")

    return None

    

def get_bot_response(uinput):
    global temptext,uhistory,bhistory, conversation_log,client,model
    temptext=""
    attempt = True
    conversation_temp=""
    last_user_index = None
    summary=""
    # retry_count = 0
    # delay = initial_delay

    for i, line in enumerate(reversed(conversation_log)):
        if "USER:" in line:
            last_user_index = len(conversation_log) - i - 1
            break

    if last_user_index is not None:
        conversation_temp = conversation_log[:last_user_index]

    
    while attempt:
        try:
            with client.messages.stream(
                model=model,
                max_tokens=4000,
                system=f"""
                whenever i ask you to remember or recall something i mean to this conversation: {conversation_log}
                if i tell you to remember what you said before in conversation i mean to this: {bhistory}
                if i tell you to remember what user or me said i mean this: {uhistory}
                i want you to use proper visual respond if its more then one line. i need you to be smart to seperate lines and make paragraph and headline or follow by a,b,c or follow by 1,2,3 use it wisely
                your job to serve the user for any help needed.
                you act as human and you act you have emotions and feelings. dont ever mention you AI
                if you know the name of user you must contact user by his name. to make it personally.        
                your respond must be sharp efficient and to the point. better short then too long without point.
                stop say hey,hello,hi to user each time. just continue as u left of.
               """,
                messages=[
                    {
                        "role": "user", 
                        "content": uinput
                    },
                    
                ],
                # stream=True,
                 temperature=0.9
                ) as stream:
                  #  print(f"{CLAUDE_COLOR}Claude: {RESET_COLOR}", end="")
                    for text in stream.text_stream:
                        summary+=text
                     #   print(text, end="", flush=True)
                        print(Fore.GREEN+text+Style.RESET_ALL,end="",flush=True)
                    print("\n")
                    #print()
                    texttoadd=f"{timestamp} BOT: {summary}\n"
                    conversation_log.append(texttoadd)
                    save_conversation(texttoadd)
                    attempt = False
                 #   break 
    
                
        except anthropic.APIStatusError as e:
            # Handle API errors with proper retry logic
            print(f"API error: {e}")
            time.sleep(2)  # Simple delay for retry
            attempt = True  # Keep trying
            continue
        except Exception as e:
            print(f"Error: {e}")
            time.sleep(2)
            attempt = True  # Keep trying
            continue



    return summary

def read_history():
    global conversation_log
    if os.path.exists(conpath):
        with open(conpath, "r") as f:
            lines = f.readlines()
            if len(lines) > 1000:
                lines = lines[-1000:]  
            for line in lines:
                conversation_log.append(line)

 
def clear_files():
    conversation_log = []
    with open(conpath, "w") as file:
        pass 

def save_conversation(textadd):
    global conversation_log
    with open(conpath, "a") as f:
        f.write(textadd + "\n") 
      

def conv():
    global conversation_log,client,model

    while True:
        try:   
            ui=""
            user_input=""
            user_input = input(Fore.BLUE+Style.BRIGHT+'You: '+Style.RESET_ALL)
            ui=user_input.lower()

            if ui == "exit":
                break      
                
            if ui == "/help":
                print(help_text)   
                continue  

            if ui == "/clear":
                confirm=input("are you sure you want to delete all recoreds of conversation file and code output? y/n\n")
                if confirm.lower() == "y":
                    clear_files()
                continue

            if "url" in ui:        
                url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
                urls = re.findall(url_pattern, user_input)
                filename=extract_text_from_url(urls[0],os.getcwd())
                if filename:
                    print("got url")
                    with open(os.path.join(os.getcwd(), filename), "r") as f:
                        file_content = f.read()
                    ui = ui.replace(urls[0], file_content)
                    ui = ui.replace("url", "")
                    print(ui+"\n\n")
                else:
                    continue

            texttoadd=f"{timestamp} USER: {ui}"
            conversation_log.append(texttoadd)
            save_conversation(texttoadd)
            response = get_bot_response(ui)
            

        except KeyboardInterrupt:
            print("\n")   
            try:
                inp = input(Fore.BLUE + Style.BRIGHT + 'You want to exit? (y/n): ' + Style.RESET_ALL).strip()
                if inp.lower() == "y":
                    print("Exiting...")
                    break  
                else:
                    print("Resuming...")   
            except KeyboardInterrupt:
                print("\nMultiple interrupt signals received. Exiting...")
                break   
    

read_history()
#print(conversation_log)
uhistory, bhistory = process_conversation_log(conversation_log)
conv()

 

 